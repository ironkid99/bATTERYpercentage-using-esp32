int8_t GetVBATLevel(uint8_t *out_battlevel)
{
    uint32_t adcValue0MicroVolt;
    /* Set up an ADCBuf peripheral in ADCBuf_RECURRENCE_MODE_ONE_SHOT */
    ADCBuf_Params_init(&adcBufParams);
    adcBufParams.recurrenceMode = ADCBuf_RECURRENCE_MODE_ONE_SHOT;
    adcBufParams.returnMode = ADCBuf_RETURN_MODE_BLOCKING;
    adcBufParams.samplingFrequency = 100;
    adcBufParams.blockingTimeout = 1000;
    /* Configure the conversion struct */
    singleConversion.arg = NULL;
    singleConversion.adcChannel = CONFIG_ADC_VBATCHANNEL_0;
    singleConversion.sampleBuffer = sampleBufferOne;
    singleConversion.samplesRequestedCount = ADCSAMPLESIZE;
    adcBuf = ADCBuf_open(CONFIG_ADC_VBAT, &adcBufParams);
    if (adcBuf == NULL)
    { return (FAILURE); }
    sleep(1);
    /* Start converting. */
    if (ADCBuf_convert(adcBuf, &singleConversion, 1) == ADCBuf_STATUS_SUCCESS)
    {
        /* Adjust raw ADC values and convert them to microvolts */
        ADCBuf_adjustRawValues(adcBuf, sampleBufferOne, ADCSAMPLESIZE,
                               CONFIG_ADC_VBATCHANNEL_0);
        ADCBuf_convertAdjustedToMicroVolts(adcBuf, CONFIG_ADC_VBATCHANNEL_0,
                                           sampleBufferOne, microVoltBuffer, ADCSAMPLESIZE);
        /* Calculate average ADC data value in uV */
        adcValue0MicroVolt = 0;
        for (i = 0; i < ADCSAMPLESIZE; i++) {
            adcValue0MicroVolt += microVoltBuffer[i];
        }
        adcValue0MicroVolt = (adcValue0MicroVolt/ADCSAMPLESIZE) + 50000;
        //100%
        if (adcValue0MicroVolt >= 2201800)
        {
            *out_battlevel = 100;
        }
        //100-80%
        else if ((adcValue0MicroVolt < 2201800) && (adcValue0MicroVolt >= 2105100))
        {
            *out_battlevel = (uint8_t)((float)(adcValue0MicroVolt-2105100)*(float)((float)20/(2201800-2105100)));
            *out_battlevel += 80;
        }
        //80-60%
        else if ((adcValue0MicroVolt < 2105100) && (adcValue0MicroVolt >= 2030000))
        {
            *out_battlevel = (uint8_t)((float)(adcValue0MicroVolt-2030000)*(float)((float)20/(2105100-2030000)));
            *out_battlevel += 60;
        }
        //60-40%
        else if ((adcValue0MicroVolt < 2030000) && (adcValue0MicroVolt >= 1987000))
        {
            *out_battlevel = (uint8_t)((float)(adcValue0MicroVolt-1987000)*(float)((float)20/(2030000-1987000)));
            *out_battlevel += 40;
        }
        //40-20%
        else if ((adcValue0MicroVolt < 1987000) && (adcValue0MicroVolt >= 1949400))
        {
            *out_battlevel = (uint8_t)((float)(adcValue0MicroVolt-1949400)*(float)((float)20/(1987000-1949400)));
            *out_battlevel += 20;
        }
        //20-10%
        else if ((adcValue0MicroVolt < 1949400) && (adcValue0MicroVolt >= 1868800))
        {
            *out_battlevel = (uint8_t)((float)(adcValue0MicroVolt-1868800)*(float)((float)10/(1949400-1868800)));
            *out_battlevel += 10;
        }
        //10-0%
        else if ((adcValue0MicroVolt < 1868800) && (adcValue0MicroVolt >= 1772200))
        {
            *out_battlevel = (uint8_t)((float)(adcValue0MicroVolt-1772200)*(float)((float)10/(1868800-1772200)));
            *out_battlevel += 0;
        }
        //0%
        else if (adcValue0MicroVolt < 1772200)
        {
            *out_battlevel = 0;
        }
        ADCBuf_close(adcBuf);
        return (SUCCESS);
    }
    return (FAILURE);
